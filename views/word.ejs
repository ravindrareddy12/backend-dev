<!DOCTYPE html>
<html>
<head>
  <title>Word Count App</title>
  <style>
    table {
      border-collapse: collapse;
    }
    
    th, td {
      border: 1px solid black;
      padding: 8px;
    }
  </style>
</head>
<body>
  <h1>Word Count App</h1>
  
  <form id="wordCountForm">
    <label for="urlInput">Enter Domain/Website URL:</label>
    <input type="text" id="urlInput" name="url" required>
    <button type="submit">Check Word Count</button>
  </form>
  
  <h2>Word Count Results</h2>
  
  <table id="wordCountTable">
    <thead>
      <tr>
        <th>Domain</th>
        <th>Word Count</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="wordCountBody">
    </tbody>
  </table>
  
  <script>
    const wordCountForm = document.getElementById('wordCountForm');
    const wordCountTable = document.getElementById('wordCountTable');
    const wordCountBody = document.getElementById('wordCountBody');
    
    // Function to display word count results in the table
    function displayWordCountResults(data) {
      wordCountBody.innerHTML = '';
      
      data.forEach(result => {
        const row = document.createElement('tr');
        const domainCell = document.createElement('td');
        domainCell.textContent = result.domain;
        row.appendChild(domainCell);
        
        const wordCountCell = document.createElement('td');
        wordCountCell.textContent = result.wordCount;
        row.appendChild(wordCountCell);
        
        const actionsCell = document.createElement('td');
        const favoriteButton = document.createElement('button');
        favoriteButton.textContent = result.isFavorite ? 'Remove Favorite' : 'Mark as Favorite';
        actionsCell.appendChild(favoriteButton);
        row.appendChild(actionsCell);
        
        wordCountBody.appendChild(row);
        
        // Add event listener for favorite button
        favoriteButton.addEventListener('click', () => {
          const newFavoriteStatus = !result.isFavorite;
          updateFavoriteStatus(result._id, newFavoriteStatus)
            .then(() => {
              favoriteButton.textContent = newFavoriteStatus ? 'Remove Favorite' : 'Mark as Favorite';
              result.isFavorite = newFavoriteStatus;
            })
            .catch(error => {
              console.log('Failed to update favorite status:', error);
            });
        });
      });
    }
    
    // Function to fetch word count results from the server
    function fetchWordCountResults() {
      fetch('/api/insights')
        .then(response => response.json())
        .then(data => {
          displayWordCountResults(data);
        })
        .catch(error => {
          console.log('Failed to fetch word count results:', error);
        });
    }
    
    // Function to update the favorite status of an insight
    function updateFavoriteStatus(id, isFavorite) {
      return fetch(`/api/insights/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ isFavorite })
      });
    }
    
    // Add event listener for the word count form submission
    wordCountForm.addEventListener('submit', event => {
      event.preventDefault();
      
      const urlInput = document.getElementById('urlInput');
      const url = urlInput.value.trim();
      
      if (url !== '') {
        fetch('/api/insights', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ domain: url })
        })
        .then(response => response.json())
        .then(data => {
          urlInput.value = '';
          fetchWordCountResults();
        })
        .catch(error => {
          console.log('Failed to create word count insight:', error);
        });
      }
    });
    
    // Fetch word count results on page load
    fetchWordCountResults();
  </script>
</body>
</html>
